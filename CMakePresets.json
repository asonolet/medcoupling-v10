{
  "version": 6,
  "cmakeMinimumRequired": {
    "major": 3,
    "minor": 14,
    "patch": 0
  },
  "configurePresets": [
    {
      "name": "common",
      "description": "This preset makes sure the project actually builds with at least the specified standard",
      "hidden": true,
      "cacheVariables": {
        "CMAKE_CXX_EXTENSIONS": "OFF",
        "CMAKE_CXX_STANDARD": "17",
        "CMAKE_CXX_STANDARD_REQUIRED": "ON",
        "CMAKE_INSTALL_RPATH_USE_LINK_PATH": "ON"
      }
    },
    {
      "name": "cppcheck",
      "hidden": true,
      "cacheVariables": {
        "CMAKE_CXX_CPPCHECK": "cppcheck;--inline-suppr"
      }
    },
    {
      "name": "clang-tidy",
      "hidden": true,
      "cacheVariables": {
        "CMAKE_CXX_CLANG_TIDY": "clang-tidy;--header-filter=^${sourceDir}/"
      }
    },
    {
      "name": "flags-gcc-clang-hard",
      "description": "These flags are supported by both GCC and Clang",
      "hidden": true,
      "cacheVariables": {
        "CMAKE_CXX_FLAGS": "-U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=3 -D_GLIBCXX_ASSERTIONS=1 -fstack-protector-strong -fcf-protection=full -Wall",
        "CMAKE_EXE_LINKER_FLAGS": "-Wl,--allow-shlib-undefined,--as-needed,-z,noexecstack,-z,relro,-z,now,-z,nodlopen",
        "CMAKE_SHARED_LINKER_FLAGS": "-Wl,--allow-shlib-undefined,--as-needed,-z,noexecstack,-z,relro,-z,now"
      }
    },
    {
      "name": "flags-gcc-clang",
      "description": "These flags are supported by both GCC and Clang",
      "hidden": true,
      "cacheVariables": {
        "CMAKE_CXX_FLAGS": "-Wall"
      }
    },
    {
      "name": "flags-appleclang",
      "hidden": true,
      "cacheVariables": {
        "CMAKE_CXX_FLAGS": "-fstack-protector-strong -Wall -Wextra -Wpedantic -Wconversion -Wsign-conversion -Wcast-qual -Wformat=2 -Wundef -Werror=float-equal -Wshadow -Wcast-align -Wunused -Wnull-dereference -Wdouble-promotion -Wimplicit-fallthrough -Wextra-semi -Woverloaded-virtual -Wnon-virtual-dtor -Wold-style-cast"
      }
    },
    {
      "name": "flags-msvc-hard",
      "description": "Note that all the flags after /W4 are required for MSVC to conform to the language standard",
      "hidden": true,
      "cacheVariables": {
        "CMAKE_CXX_FLAGS": "/sdl /guard:cf /utf-8 /diagnostics:caret /w14165 /w44242 /w44254 /w44263 /w34265 /w34287 /w44296 /w44365 /w44388 /w44464 /w14545 /w14546 /w14547 /w14549 /w14555 /w34619 /w34640 /w24826 /w14905 /w14906 /w14928 /w45038 /W4 /permissive- /volatile:iso /Zc:inline /Zc:preprocessor /Zc:enumTypes /Zc:lambda /Zc:__cplusplus /Zc:externConstexpr /Zc:throwingNew /EHsc",
        "CMAKE_EXE_LINKER_FLAGS": "/machine:x64 /guard:cf",
        "CMAKE_SHARED_LINKER_FLAGS": "/machine:x64 /guard:cf"
      }
    },
    {
      "name": "flags-msvc-soft",
      "hidden": true,
      "cacheVariables": {
        "CMAKE_CXX_FLAGS": "/permissive- /volatile:iso /Zc:inline /Zc:preprocessor /Zc:enumTypes /Zc:lambda /Zc:__cplusplus /Zc:externConstexpr /Zc:throwingNew /EHsc",
        "CMAKE_EXE_LINKER_FLAGS": "/machine:x64 /guard:cf",
        "CMAKE_SHARED_LINKER_FLAGS": "/machine:x64 /guard:cf"
      }
    },
    {
      "name": "flags-msvc",
      "hidden": true,
      "cacheVariables": {
        "CMAKE_EXE_LINKER_FLAGS": "/machine:x64",
        "CMAKE_SHARED_LINKER_FLAGS": "/machine:x64"
      }
    },
    {
      "name": "linux",
      "inherits": ["flags-gcc-clang", "common"],
      "generator": "Unix Makefiles",
      "hidden": true
    },
    {
      "name": "darwin",
      "inherits": ["flags-appleclang", "common"],
      "generator": "Xcode",
      "hidden": true
    },
    {
      "name": "win64",
      "inherits": ["flags-msvc", "common"],
      "generator": "Visual Studio 16 2019",
      "architecture": "x64",
      "hidden": true
    },
    {
      "name": "dev-linux",
      "inherits": "linux",
      "hidden": true,
      "cacheVariables": {
        "CMAKE_BUILD_TYPE": "Debug",
        "CMAKE_EXPORT_COMPILE_COMMANDS": "ON"
      }
    },
    {
      "name": "relwdeb-linux",
      "inherits": "linux",
      "hidden": true,
      "cacheVariables": {
        "CMAKE_BUILD_TYPE": "RelWithDebInfo"
      }
    },
    {
      "name": "rel-linux",
      "inherits": "linux",
      "hidden": true,
      "cacheVariables": {
        "CMAKE_BUILD_TYPE": "Release"
      }
    },
    {
      "name": "coverage-linux",
      "inherits": "linux",
      "hidden": true,
      "cacheVariables": {
        "ENABLE_COVERAGE": "ON",
        "CMAKE_BUILD_TYPE": "Coverage",
        "CMAKE_CXX_FLAGS_COVERAGE": "-Og -g --coverage -fkeep-inline-functions -fkeep-static-functions",
        "CMAKE_EXE_LINKER_FLAGS_COVERAGE": "--coverage",
        "CMAKE_SHARED_LINKER_FLAGS_COVERAGE": "--coverage",
        "CMAKE_MAP_IMPORTED_CONFIG_COVERAGE": "Coverage;RelWithDebInfo;Release;Debug;",
        "COVERAGE_HTML_COMMAND": ""
      }
    },
    {
      "name": "sanitize-linux",
      "hidden": true,
      "inherits": "linux",
      "cacheVariables": {
        "CMAKE_BUILD_TYPE": "Sanitize",
        "CMAKE_CXX_FLAGS_SANITIZE": "-U_FORTIFY_SOURCE -O2 -g -fsanitize=address,undefined -fno-omit-frame-pointer -fno-common",
        "CMAKE_MAP_IMPORTED_CONFIG_SANITIZE": "Sanitize;RelWithDebInfo;Release;Debug;"
      }
    },
    {
      "name": "multi-config-release",
      "description": "Speed up multi-config generators by generating only one configuration instead of the defaults",
      "hidden": true,
      "cacheVariables": {
        "CMAKE_CONFIGURATION_TYPES": "Release"
      }
    },
    {
      "name": "med-opt",
      "hidden": true,
      "cacheVariables": {
        "MEDCOUPLING_USE_64BIT_IDS": "ON",
        "MEDCOUPLING_USE_MPI": false
      }
    },
    {
      "name": "conan",
      "hidden": true,
      "cacheVariables": {
        "CMAKE_TOOLCHAIN_FILE": "${sourceDir}/conan/conan_toolchain.cmake",
        "CMAKE_POLICY_DEFAULT_CMP0091": "NEW"
      }
    },
    {
      "name": "ci-coverage",
      "binaryDir": "${sourceDir}/build/coverage",
      "installDir": "${sourceDir}/install/coverage",
      "inherits": ["coverage-linux", "conan", "med-opt"]
    },
    {
      "name": "ci-sanitize",
      "binaryDir": "${sourceDir}/build/sanitize",
      "installDir": "${sourceDir}/install/sanitize",
      "inherits": ["sanitize-linux", "med-opt", "conan"]
    },
    {
      "name": "ci-macos",
      "binaryDir": "${sourceDir}/build/macos",
      "installDir": "${sourceDir}/install/macos",
      "inherits": ["darwin", "med-opt", "multi-config-release", "conan"]
    },
    {
      "name": "ci-ubuntu",
      "binaryDir": "${sourceDir}/build/linux",
      "installDir": "${sourceDir}/install/linux",
      "inherits": ["rel-linux", "conan", "med-opt"]
    },
    {
      "name": "ci-windows",
      "binaryDir": "${sourceDir}/build/windows",
      "installDir": "${sourceDir}/install/windows",
      "inherits": ["win64", "med-opt", "multi-config-release", "conan"]
    },
    {
      "name": "dev",
      "binaryDir": "${sourceDir}/build/Debug",
      "installDir": "${sourceDir}/install/Debug",
      "inherits": ["dev-linux", "conan", "med-opt"]
    },
    {
      "name": "relwdeb",
      "binaryDir": "${sourceDir}/build/RelWithDebInfo",
      "installDir": "${sourceDir}/install/RelWithDebInfo",
      "inherits": ["relwdeb-linux", "conan", "med-opt"]
    },
    {
      "name": "rel",
      "binaryDir": "${sourceDir}/build/Release",
      "installDir": "${sourceDir}/install/Release",
      "inherits": ["rel-linux", "conan", "med-opt"]
    }
  ],
  "buildPresets": [
    {
      "name": "local-build",
      "hidden": true,
      "targets": "install",
      "jobs": 8
    },
    {
      "name": "ci-build",
      "hidden": true,
      "configuration": "Release",
      "jobs": 4
    },
    {
      "name": "dev",
      "inherits": "local-build",
      "configurePreset": "dev"
    },
    {
      "name": "relwdeb",
      "inherits": "local-build",
      "configurePreset": "relwdeb"
    },
    {
      "name": "rel",
      "inherits": "local-build",
      "configurePreset": "rel"
    },
    {
      "name": "ci-ubuntu",
      "inherits": "ci-build",
      "configurePreset": "ci-ubuntu"
    },
    {
      "name": "ci-windows",
      "inherits": "ci-build",
      "configurePreset": "ci-windows"
    },
    {
      "name": "ci-macos",
      "inherits": "ci-build",
      "configurePreset": "ci-macos"
    },
    {
      "name": "ci-sanitize",
      "inherits": "ci-build",
      "configurePreset": "ci-sanitize"
    },
    {
      "name": "ci-coverage",
      "inherits": "ci-build",
      "configurePreset": "ci-coverage"
    }
  ],
  "testPresets": [
    {
      "name": "common-test",
      "hidden": true,
      "output": {
        "outputOnFailure": true
      },
      "environment": {
        "MEDCOUPLING_RESOURCE_DIR": "${sourceDir}/resources"
      }
    },
    {
      "name": "ci-test",
      "hidden": true,
      "inherits": "common-test",
      "configuration": "Release",
      "execution": {
        "jobs": 4,
        "noTestsAction": "error"
      },
      "output": {
        "verbose": "extra"
      }
    },
    {
      "name": "local-test",
      "hidden": true,
      "inherits": "common-test",
      "execution": {
        "jobs": 8,
        "noTestsAction": "error"
      }
    },
    {
      "name": "dev",
      "inherits": "local-test",
      "configurePreset": "dev"
    },
    {
      "name": "relwdeb",
      "inherits": "local-test",
      "configurePreset": "relwdeb"
    },
    {
      "name": "rel",
      "inherits": "local-test",
      "configurePreset": "rel"
    },
    {
      "name": "ci-ubuntu",
      "inherits": "ci-test",
      "configurePreset": "ci-ubuntu"
    },
    {
      "name": "ci-windows",
      "inherits": "ci-test",
      "configurePreset": "ci-windows"
    },
    {
      "name": "ci-macos",
      "inherits": "ci-test",
      "configurePreset": "ci-macos"
    },
    {
      "name": "ci-sanitize",
      "inherits": "ci-test",
      "configurePreset": "ci-sanitize"
    },
    {
      "name": "ci-coverage",
      "inherits": "ci-test",
      "configurePreset": "ci-coverage"
    }
  ],
  "workflowPresets": [
    {
      "name": "dev",
      "description": "A workflow which configures, build and test the Debug configuration",
      "steps": [
        {
          "type": "configure",
          "name": "dev"
        },
        {
          "type": "build",
          "name": "dev"
        },
        {
          "type": "test",
          "name": "dev"
        }
      ]
    }
  ]
}
