# Copyright (C) 2017-2024  CEA, EDF
#
# This library is free software; you can redistribute it and/or modify it under
# the terms of the GNU Lesser General Public License as published by the Free
# Software Foundation; either version 2.1 of the License, or (at your option)
# any later version.
#
# This library is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License for more
# details.
#
# You should have received a copy of the GNU Lesser General Public License along
# with this library; if not, write to the Free Software Foundation, Inc., 59
# Temple Place, Suite 330, Boston, MA  02111-1307 USA
#
# See http://www.salome-platform.org/ or email :
# webmaster.salome@opencascade.com
#
# Author : Anthony Geay (EDF R&D)

add_compile_definitions("WITH_NUMPY" "WITH_SCIPY")
set_source_files_properties(medcoupling.i PROPERTIES CPLUSPLUS ON)
if(WIN32)
  set_property(SOURCE medcoupling.i PROPERTY COMPILE_DEFINITIONS WIN32)
endif()

set(medcoupling_LIB_dependancies
  Python::Module Python::NumPy medcouplingcpp medcouplingremapper medicoco)

if(NOT MEDCOUPLING_MICROMED)
  list(APPEND SWIG_MODULE_medcoupling_EXTRA_FLAGS -DWITH_MED_FILE)
  list(APPEND medcoupling_LIB_dependancies medloader)

  if(MEDCOUPLING_ENABLE_RENUMBER)
    list(APPEND SWIG_MODULE_medcoupling_EXTRA_FLAGS -DWITH_RENUMBER)
    list(APPEND medcoupling_LIB_dependancies renumbercpp)
  endif(MEDCOUPLING_ENABLE_RENUMBER)

  if(MEDCOUPLING_ENABLE_PARTITIONER)
    list(APPEND SWIG_MODULE_medcoupling_EXTRA_FLAGS -DWITH_PARTITIONER)
    list(APPEND medcoupling_LIB_dependancies medpartitionercpp)
  endif(MEDCOUPLING_ENABLE_PARTITIONER)

  if(MEDCOUPLING_ENABLE_SHAPERECOGN)
    list(APPEND SWIG_MODULE_medcoupling_EXTRA_FLAGS -DWITH_SHAPE_RECOGN)
    list(APPEND medcoupling_LIB_dependancies shaperecogn)
  endif(MEDCOUPLING_ENABLE_SHAPERECOGN)

  if(BASICITERATIVESTATISTICS_FOUND)
    LIST(APPEND SWIG_MODULE_medcoupling_EXTRA_FLAGS -DWITH_ITERATIVE_STATISTICS)
  endif(BASICITERATIVESTATISTICS_FOUND)
endif(NOT MEDCOUPLING_MICROMED)

if(MEDCOUPLING_USE_MPI)
  # include_directories(${MPI_INCLUDE_DIRS})
  # add_definitions(${MPI_DEFINITIONS})
  list(APPEND SWIG_MODULE_medcoupling_EXTRA_FLAGS -DWITH_PARALLEL_INTERPOLATOR)
  list(APPEND medcoupling_LIB_dependancies paramedmem)
endif(MEDCOUPLING_USE_MPI)

swig_add_library(
  medcoupling
  LANGUAGE python
  OUTPUT_DIR .
  SOURCES medcoupling.i)

target_include_directories(
  ${SWIG_MODULE_medcoupling_REAL_NAME}
  PRIVATE
  "\$<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}>"
  "\$<BUILD_INTERFACE:${PROJECT_SOURCE_DIR}/medcoupling_core/python/medcoupling_core>"
  "\$<BUILD_INTERFACE:${PROJECT_SOURCE_DIR}/medcoupling_core/python/medfile_api>"
  "\$<BUILD_INTERFACE:${PROJECT_SOURCE_DIR}/medcoupling_tools/rempper/python/para_remapper>"
  "\$<BUILD_INTERFACE:${PROJECT_SOURCE_DIR}/medcoupling_tools/icoco/python>"
  "\$<BUILD_INTERFACE:${PROJECT_SOURCE_DIR}/medcoupling_tools/renumberer/python>"
  "\$<BUILD_INTERFACE:${PROJECT_SOURCE_DIR}/medcoupling_tools/partitioner/python>"
  "\$<BUILD_INTERFACE:${PROJECT_SOURCE_DIR}/medcoupling_tools/shape_recognizer/python>"
)

set_target_properties(
  ${SWIG_MODULE_medcoupling_REAL_NAME} PROPERTIES
  INSTALL_RPATH ${MEDCOUPLING_INSTALL_PYTHON_LIBS_DEPS_RPATH}
  SWIG_USE_TARGET_INCLUDE_DIRECTORIES TRUE)

# add_definitions(
#   ${PYTHON_DEFINITIONS} ${NUMPY_DEFINITIONS} ${SCIPY_DEFINITIONS}
#   -DMEDCOUPLING_GIT_SHA1=\"${MEDCOUPLING_GIT_SHA1}\"
#   -DMEDCOUPLING_CONFIG_DT=\"${MEDCOUPLING_CONFIG_TIME}\")

target_compile_definitions(
  ${SWIG_MODULE_medcoupling_REAL_NAME}
  PUBLIC
  MEDCOUPLING_GIT_SHA1="10.0.0" # TODO: use real git sha
  MEDCOUPLING_CONFIG_DT="23/07/2024 13:30:00" # TODO: This should not be done because it breaks binary definition
)

target_link_libraries(${SWIG_MODULE_medcoupling_REAL_NAME} PUBLIC ${medcoupling_LIB_dependancies})

if(WIN32)
  set_target_properties(
    ${SWIG_MODULE_medcoupling_REAL_NAME} PROPERTIES
    DEBUG_OUTPUT_NAME _medcoupling_d)
  # To increase the size of the .obj file on Windows because
  # MEDLoaderPYTHON_wrap.cxx, generated by SWIG, is too big
  target_compile_options(${SWIG_MODULE_medcoupling_REAL_NAME} PRIVATE /bigobj)
endif()

install(
  TARGETS ${SWIG_MODULE_medcoupling_REAL_NAME}
  # RUNTIME_DEPENDENCIES DIRECTORIES ${MEDCOUPLING_INSTALL_LIBS}
  DESTINATION ${MEDCOUPLING_INSTALL_PYTHON})

install(FILES ${CMAKE_CURRENT_BINARY_DIR}/medcoupling.py DESTINATION ${MEDCOUPLING_INSTALL_PYTHON})

# install(FILES medcoupling.i medcoupling_pycode
#         DESTINATION ${MEDCOUPLING_INSTALL_HEADERS})
# salome_install_scripts(
#   ${CMAKE_CURRENT_BINARY_DIR}/medcoupling.py ${MEDCOUPLING_INSTALL_PYTHON}
#   EXTRA_DPYS "${SWIG_MODULE_medcoupling_REAL_NAME}")
# 
# if(MEDCOUPLING_BUILD_PY_TESTS)
#   include(tests.set)
# endif()
# 
# salome_generate_tests_environment(tests_env)
# 
# foreach(test ${BASE_TESTS})
#   get_filename_component(testname ${test} NAME_WE)
#   add_test(NAME ${testname} COMMAND ${PYTHON_EXECUTABLE}
#                                     ${CMAKE_CURRENT_SOURCE_DIR}/${test})
#   set_tests_properties(${testname} PROPERTIES ENVIRONMENT "${tests_env}")
# endforeach()
# 
# set(TEST_INSTALL_DIRECTORY ${MEDCOUPLING_INSTALL_TESTS}/PyWrapping)
# 
# install(
#   FILES CTestTestfileInstall.cmake
#   DESTINATION ${TEST_INSTALL_DIRECTORY}
#   RENAME CTestTestfile.cmake)
# install(FILES ${BASE_TESTS} DESTINATION ${TEST_INSTALL_DIRECTORY})
# install(FILES tests.set DESTINATION ${TEST_INSTALL_DIRECTORY})
